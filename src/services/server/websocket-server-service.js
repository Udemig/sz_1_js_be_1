import uWS from "uWebSockets.js";
import {
  ROOM_PREFIXES,
  bufferToString,
  findAllControllerFiles,
} from "../../utils.js";
import WsConnectionHandler from "./ws/ws-connection-handler.js";

export default class WebsocketServerService {
  services = null;
  wsServer = null;

  /* Hangi ws client'Ä±nÄ±n hangi user'a ait olduÄŸunu burada tutacaÄŸÄ±z. */
  wsClients = [];

  // BurasÄ± ÅŸimdilik kalsÄ±n, hangi client'Ä±n hangi room'da olduÄŸunu tutan
  // bir yÃ¶ntem geliÅŸtireceÄŸiz.
  /* Åžu ÅŸekilde bir yapÄ± kuracaÄŸÄ±z: roomlarÄ± map yapÄ±sÄ± ÅŸeklinde tutacaÄŸÄ±z. Her odanÄ±n
  iÃ§erisinde birden fazla peer olacaÄŸÄ±ndan dolayÄ± bunlarÄ± da dizi olarak tutacaÄŸÄ±z. Yani
  son hali ÅŸuna benzer olacak:

  {
    "room_id_1" : [
      { ws_conn_1, user_id_1 },
      { ws_conn_2, user_id_1 },
      { ws_conn_3, user_id_6 },
      { ws_conn_4, user_id_3 },
    ],
    "room_id_2" : [
      { ws_conn_1, user_id_3 },
      { ws_conn_2, user_id_5 },
      { ws_conn_3, user_id_5 },
      { ws_conn_4, user_id_1 },
    ],
    "room_id_3" : [
    ],
    "room_id_4" : [
    ]
  }
  */

  wsRoutes = {};

  constructor(services) {
    this.services = services;
    console.log("Websocket server instance created.");
  }

  async getRoomOnlinePeers(roomId) {
    const userIds = [];

    this.wsClients.forEach((ws) => {
      try {
        console.log(
          "ws isSubscribed:",
          ws.isSubscribed(ROOM_PREFIXES.room_id + roomId)
        );
        console.log("ws userId:", ws.getUserData().userId);
        console.log("ws includes:", userIds.includes(ws.getUserData().userId));

        if (
          ws.isSubscribed(ROOM_PREFIXES.room_id + roomId) &&
          ws.getUserData().userId &&
          !userIds.includes(ws.getUserData().userId)
        ) {
          userIds.push(ws.getUserData().userId);
        }
      } catch (e) {}
    });

    console.log(">> ðŸš€ wsClients:", this.wsClients);
    console.log(">> ðŸš€ online userIds:", userIds);

    return userIds;
  }

  /* Belirtilen topic'e mesaj gÃ¶nder. `sendData()` methodu diÄŸer servislerden
  eriÅŸilebilir. Bu sayede Ã¶rneÄŸin http sunucusundan websocket sunucusuna mesaj
  iletmek mÃ¼mkÃ¼n olur. */
  async sendData(topic, message) {
    if (this.wsServer === null) {
      return false;
    }
    message = typeof message === "string" ? message : JSON.stringify(message);

    this.wsServer.publish(topic, message, false, false);

    return true;
  }

  async startHeartBeat() {
    this.wsClients = this.wsClients.filter((item) => item);

    this.wsClients.forEach((ws, index) => {
      try {
        //console.log("Ws client processing: ", ws.getUserData());

        if (ws.lastHbTime < Date.now() - 60) {
          delete this.wsClients[index];
        } else {
          /* EÄŸer data gÃ¶nderilemezse ÅŸuanki baÄŸlantÄ± client tarafÄ±nda kapatÄ±lmÄ±ÅŸ ama
          bu kapanma bilgisi sunucuya gÃ¶nderilmemiÅŸ. DolayÄ±sÄ±yla sunucu bunun hala
          aÃ§Ä±k olduÄŸunu zannediyor. Bu durumdayken `send()` fonksiyonunu Ã§aÄŸÄ±rÄ±rsak
          websocket server exception throw eder. Bu exception'Ä± aÅŸaÄŸÄ±daki
          `catch (e)` bloÄŸunda yakalarÄ±z ve ÅŸuanki client'Ä± delete yaparÄ±z. BÃ¶ylece
          bir sonraki HB saykÄ±lÄ±nda artÄ±k bu client silinmiÅŸ olur.
          */
          ws.send(JSON.stringify({ hb: Date.now() }));
        }
      } catch (e) {
        delete this.wsClients[index];
      }
    });

    setTimeout(() => this.startHeartBeat(), 5_000);
  }

  async configureWebsocketRoutes() {
    const controllerFiles = findAllControllerFiles();

    for (let i = 0; i < controllerFiles.length; i++) {
      const controllerFile = controllerFiles[i];
      const controllerClass = await import(controllerFile);

      try {
        const obj = new controllerClass.default(this.services);
        await obj.registerWebsocketRoutes(this.wsRoutes);
      } catch (e) {
        /* AslÄ±nda hiÃ§bir catch bloÄŸu boÅŸ bÄ±rakÄ±lmamalÄ±. BÃ¼tÃ¼n exception'lar mutlaka
        handle edilmeli. Ã‡Ã¼nkÃ¼ eÄŸer bÃ¶yle yapmazsak Ã¶nemsiz olduÄŸunu sandÄ±ÄŸÄ±mÄ±z hatalar
        ileride bÃ¼yÃ¼k sÄ±kÄ±ntÄ±lar Ã§Ä±karabilir. */
      }
    }
  }

  async start() {
    console.log("Websocket server starting.");

    this.wsServer = uWS.App();

    await this.configureWebsocketRoutes();

    this.startHeartBeat();

    this.wsServer
      .ws("/*", {
        /* Options */
        compression: uWS.SHARED_COMPRESSOR,
        maxPayloadLength: 16 * 1024 * 1024,
        idleTimeout: 10,
        /* Handlers */

        /* Herhangi bir websocket client'Ä± yeni baÄŸlantÄ± oluÅŸturduÄŸunda bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        open: (ws) => {
          try {
            /* Her yeni baÄŸlantÄ±yÄ± Ã¶ncelikle "default" topic'e (topic yani room yani oda) baÄŸlayalÄ±m. */
            ws.subscribe("default");

            /* HoÅŸgeldin mesajÄ±nÄ± bu baÄŸlantÄ±ya gÃ¶nder. */
            ws.send(
              JSON.stringify({
                status: "success",
                data: "`default` odasÄ±na hoÅŸgeldiniz.",
              })
            );

            this.wsClients.push(ws);
          } catch (e) {
            console.log(">> ðŸš€ e:", e);
          }
        },

        /* Herhangi bir websocket client'Ä±ndan sunucuya mesaj geldiÄŸinde
        bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        message: (ws, message, isBinary) => {
          let messageStr = bufferToString(message, "utf-8");
          let messageObj = JSON.parse(messageStr);

          /* AÅŸaÄŸÄ±daki if bloklarÄ± sayesinde clienttan gelen mesajÄ±n nasÄ±l iÅŸleneceÄŸini
          tespit edebiliyoruz. Fakat bu yÃ¶ntem en basit ve amatÃ¶r yÃ¶ntemdir. Mesaj tÃ¼rleri
          Ã§ok miktarda olduÄŸunda daha iyi yÃ¶ntemler kullanmamÄ±z gerekir. AynÄ± expressjs'de
          yaptÄ±ÄŸÄ±mÄ±z yÃ¶nteme benzer bir yÃ¶ntem geliÅŸtirebiliriz. Http controller'lar gibi
          websocket controllerlar oluÅŸturup bunlarÄ± otomatik olarak import edip
          fonksiyon ve router eÅŸleÅŸtirmelerini yaparak gelen mesajÄ±n iÃ§erisindeki
          `command` property'si ile eÅŸleÅŸtirerek datayÄ± ilgili fonksiyona gÃ¶nderebiliriz.
          BÃ¶ylece Ã§ok miktardaki datayÄ± farklÄ± controllerlara bÃ¶lebiliriz. */

          const routeList = Object.keys(this.wsRoutes);
          const routeMethods = Object.values(this.wsRoutes);

          // TODO EÄŸer bilinmeyen bir command gelmiÅŸse o zaman client'a hata mesajÄ± gÃ¶nder.
          let commandFound = false;

          routeList.forEach((item, index) => {
            if (item === messageObj.command) {
              commandFound = true;
              const method = routeMethods[index];
              method(new WsConnectionHandler(ws), messageObj, this.wsServer);
            }
          });

          if (!commandFound) {
            if (typeof messageObj === "object" && messageObj.hb) {
              // TODO Handle heartbeat.
            } else {
              ws.send(
                JSON.stringify({
                  status: "error",
                  errorMessage: "Bilinmeyen bir komut gÃ¶nderildi.",
                })
              );
            }
          }

          /* Ok is false if backpressure was built up, wait for drain */
          //let ok = ws.send(
          //  JSON.stringify({
          //    status: "success",
          //    data: "This data sent from server.",
          //  }),
          //  false
          //);
        },

        /* Bu fonksiyona ihtiyacÄ±mÄ±z yok ama yine de burada dursun. AslÄ±nda bu event'Ä±n
        amacÄ± beklemede duran Ã§ok fazla mesaj biriktiÄŸinde Ã§alÄ±ÅŸÄ±r. DolayÄ±sÄ±yla kuyruÄŸun
        dolduÄŸunu bu event vasÄ±tasÄ±yla anlayabiliriz ve ona gÃ¶re aksiyon alabiliriz. */
        drain: (ws) => {
          console.log(
            "WebSocket backpressure: " +
              bufferToString(ws.getRemoteAddressAsText())
          );
        },

        /* Herhangi bir websocket client'Ä± baÄŸlantÄ±sÄ±nÄ± kapattÄ±ÄŸÄ±nda bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        close: (ws, code, message) => {},
      })
      .any("/*", (res, req) => {
        res.end("HTTP Server response");
      })
      .listen(
        process.env.WEBSOCKET_SERVER_HOST,
        parseInt(process.env.WEBSOCKET_SERVER_PORT),
        (token) => {
          if (token) {
            console.log(
              `Websocket Server started at ws://${process.env.WEBSOCKET_SERVER_HOST}:${process.env.WEBSOCKET_SERVER_PORT}`
            );
          } else {
            console.log(
              `Failed to listen websocket server at ws://${process.env.WEBSOCKET_SERVER_HOST}:${process.env.WEBSOCKET_SERVER_PORT}`
            );
          }
        }
      );
  }
}

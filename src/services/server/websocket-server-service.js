import uWS from "uWebSockets.js";
import { bufferToString, findAllControllerFiles } from "../../utils.js";

export default class WebsocketServer {
  services = null;
  wsServer = null;

  /* Hangi ws client'Ä±nÄ±n hangi user'a ait olduÄŸunu burada tutacaÄŸÄ±z. */
  wsClients = [];

  wsRoutes = {};

  constructor(services) {
    this.services = services;
    console.log("Websocket server instance created.");
  }

  /* Belirtilen topic'e mesaj gÃ¶nder. `sendData()` methodu diÄŸer servislerden
  eriÅŸilebilir. Bu sayede Ã¶rneÄŸin http sunucusundan websocket sunucusuna mesaj
  iletmek mÃ¼mkÃ¼n olur. */
  async sendData(topic, message) {
    if (this.wsServer === null) {
      return false;
    }
    message = typeof message === "string" ? message : JSON.stringify(message);

    this.wsServer.publish(topic, message, false, false);

    return true;
  }

  async startHeartBeat() {
    this.wsClients = this.wsClients.filter((item) => item);

    console.log("Sending HB data to these clients: " + this.wsClients.length);

    this.wsClients.forEach((ws, index) => {
      try {
        console.log("Ws client processing: ", ws.getUserData());

        console.log(
          ">> ðŸš€ file: websocket-server-service.js:34 ðŸš€ ws:",
          bufferToString(ws.getRemoteAddressAsText())
        );

        if (ws.lastHbTime < Date.now() - 60) {
          delete this.wsClients[index];
        } else {
          /* EÄŸer data gÃ¶nderilemezse ÅŸuanki baÄŸlantÄ± client tarafÄ±nda kapatÄ±lmÄ±ÅŸ ama
          bu kapanma bilgisi sunucuya gÃ¶nderilmemiÅŸ. DolayÄ±sÄ±yla sunucu bunun hala
          aÃ§Ä±k olduÄŸunu zannediyor. Bu durumdayken `send()` fonksiyonunu Ã§aÄŸÄ±rÄ±rsak
          websocket server exception throw eder. Bu exception'Ä± aÅŸaÄŸÄ±daki
          `catch (e)` bloÄŸunda yakalarÄ±z ve ÅŸuanki client'Ä± delete yaparÄ±z. BÃ¶ylece
          bir sonraki HB saykÄ±lÄ±nda artÄ±k bu client silinmiÅŸ olur.
          */
          ws.send(JSON.stringify({ hb: Date.now() }));
        }
      } catch (e) {
        delete this.wsClients[index];
      }
    });

    setTimeout(() => this.startHeartBeat(), 5_000);
  }

  async configureWebsocketRoutes() {
    const controllerFiles = findAllControllerFiles();

    for (let i = 0; i < controllerFiles.length; i++) {
      const controllerFile = controllerFiles[i];
      const controllerClass = await import(controllerFile);

      // buraya dÃ¶n
      try {
        const obj = new controllerClass.default(this.services);
        await obj.registerWebsocketRoutes(this.wsRoutes);
      } catch (e) {
        //console.log("This file excluding: ", controllerFile);
      }
    }

    console.log("All websocket routes: ", this.wsRoutes);
  }

  async start() {
    console.log("Websocket server starting.");

    this.wsServer = uWS.App();

    await this.configureWebsocketRoutes();

    this.startHeartBeat();

    this.wsServer
      .ws("/*", {
        /* Options */
        compression: uWS.SHARED_COMPRESSOR,
        maxPayloadLength: 16 * 1024 * 1024,
        idleTimeout: 10,
        /* Handlers */

        /* Herhangi bir websocket client'Ä± yeni baÄŸlantÄ± oluÅŸturduÄŸunda bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        open: (ws) => {
          try {
            console.log(
              "Websocket connection received, IP: " +
                bufferToString(ws.getRemoteAddressAsText())
            );

            /* Her yeni baÄŸlantÄ±yÄ± Ã¶ncelikle "default" topic'e (topic yani room yani oda) baÄŸlayalÄ±m. */
            ws.subscribe("default");

            /* HoÅŸgeldin mesajÄ±nÄ± bu baÄŸlantÄ±ya gÃ¶nder. */
            ws.send(
              JSON.stringify({
                status: "success",
                data: "`default` odasÄ±na hoÅŸgeldiniz.",
              })
            );

            this.wsClients.push(ws);
          } catch (e) {
            console.log(">> ðŸš€ e:", e);
          }
        },

        /* Herhangi bir websocket client'Ä±ndan sunucuya mesaj geldiÄŸinde
        bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        message: (ws, message, isBinary) => {
          console.log(
            "WS message received from IP: ",
            bufferToString(ws.getRemoteAddressAsText()),
            bufferToString(message, "utf-8")
          );
          let messageStr = bufferToString(message, "utf-8");
          let messageObj = JSON.parse(messageStr);
          console.log(">> ðŸš€ messageObj:", messageObj);

          /*
Client'tan sunucuya gÃ¶nderilen Ã¶rnek mesajlar:

>> ðŸš€ file: websocket-server-service.js:34 ðŸš€ ws: 127.0.0.1
WS message received from IP: 127.0.0.1 {"token":"1335d6a4-14fa-4861-b89a-014302043bdd"}
>> ðŸš€ messageObj: { token: '1335d6a4-14fa-4861-b89a-014302043bdd' }
{ comand: "auth/login", token: "1335d6a4-14fa-4861-b89a-014302043bdd"}
WS message received from IP: 127.0.0.1 {"token":"1335d6a4-14fa-4861-b89a-014302043bdd"}
>> ðŸš€ messageObj: { token: '1335d6a4-14fa-4861-b89a-014302043bdd' }
{command: "room/send", message: "merhaba", room_id: "12"}
room/join
room/exit
*/

          /* AÅŸaÄŸÄ±daki if bloklarÄ± sayesinde clienttan gelen mesajÄ±n nasÄ±l iÅŸleneceÄŸini
          tespit edebiliyoruz. Fakat bu yÃ¶ntem en basit ve amatÃ¶r yÃ¶ntemdir. Mesaj tÃ¼rleri
          Ã§ok miktarda olduÄŸunda daha iyi yÃ¶ntemler kullanmamÄ±z gerekir. AynÄ± expressjs'de
          yaptÄ±ÄŸÄ±mÄ±z yÃ¶nteme benzer bir yÃ¶ntem geliÅŸtirebiliriz. Http controller'lar gibi
          websocket controllerlar oluÅŸturup bunlarÄ± otomatik olarak import edip
          fonksiyon ve router eÅŸleÅŸtirmelerini yaparak gelen mesajÄ±n iÃ§erisindeki
          `command` property'si ile eÅŸleÅŸtirerek datayÄ± ilgili fonksiyona gÃ¶nderebiliriz.
          BÃ¶ylece Ã§ok miktardaki datayÄ± farklÄ± controllerlara bÃ¶lebiliriz. */

          // buraya dÃ¶n
          const routeList = Object.keys(this.wsRoutes);
          const routeMethods = Object.values(this.wsRoutes);

          // TODO EÄŸer bilinmeyen bir command gelmiÅŸse o zaman client'a hata mesajÄ± gÃ¶nder.

          let commandFound = false;

          routeList.forEach((item, index) => {
            if (item === messageObj.command) {
              commandFound = true;
              // Bulunan methodu invoke et.
              routeMethods[index](ws, messageObj, this.wsServer);
            }
          });

          if (!commandFound) {
            ws.send(
              JSON.stringify({
                status: "error",
                errorMessage: "Bilinmeyen bir komut gÃ¶nderildi.",
              })
            );
          }

          /* Ok is false if backpressure was built up, wait for drain */
          //let ok = ws.send(
          //  JSON.stringify({
          //    status: "success",
          //    data: "This data sent from server.",
          //  }),
          //  false
          //);
        },

        /* Bu fonksiyona ihtiyacÄ±mÄ±z yok ama yine de burada dursun. */
        drain: (ws) => {
          console.log(
            "WebSocket backpressure: " +
              bufferToString(ws.getRemoteAddressAsText())
          );
        },

        /* Herhangi bir websocket client'Ä± baÄŸlantÄ±sÄ±nÄ± kapattÄ±ÄŸÄ±nda bu fonksiyon Ã§alÄ±ÅŸÄ±r. */
        close: (ws, code, message) => {
          console.log("Websocket connection closed");

          // TODO Bu `ws`  client listesinden sil.
        },
      })
      .any("/*", (res, req) => {
        res.end("HTTP Server response");
      })
      .listen(
        process.env.WEBSOCKET_SERVER_HOST,
        parseInt(process.env.WEBSOCKET_SERVER_PORT),
        (token) => {
          if (token) {
            console.log(
              `Websocket Server started at ws://${process.env.WEBSOCKET_SERVER_HOST}:${process.env.WEBSOCKET_SERVER_PORT}`
            );
          } else {
            console.log(
              `Failed to listen websocket server at ws://${process.env.WEBSOCKET_SERVER_HOST}:${process.env.WEBSOCKET_SERVER_PORT}`
            );
          }
        }
      );
  }
}

import { Message } from "../models/message.js";
import { Room } from "../models/room.js";
import { User } from "../models/user.js";
import createRoomValidator from "../request-validators/room/create-room-validator.js";
import { FRONTEND_WS_COMMANDS, ROOM_PREFIXES, sleep } from "../utils.js";
import BaseController from "./base-controller.js";

export default class RoomController extends BaseController {
  /* TODO bind() fonksiyonunun ne iÅŸe yaradÄ±ÄŸÄ±nÄ± aÃ§Ä±kla. */
  httpRoutes = {
    "/room/create": this.createRoom.bind(this),

    /* AÅŸaÄŸÄ±daki route dinamik olduÄŸundan dolayÄ± eÄŸer ÅŸu adrese `/room/getMessages`
    istek atarsak beklenilen fonksiyona deÄŸil getRoom fonksiyonuna istek gitmiÅŸ olur.
    Bu istenmeyen bir durumdur ve route'larÄ±n doÄŸru Ã§alÄ±ÅŸmadÄ±ÄŸÄ± izlenimini verebilir.
    Bu problemi Ã§Ã¶zmenin iki yolu var. Birincisi bu route'Ä± en alt sÄ±raya almak.
    Ä°kincisi de bu route'Ä±n adresini deÄŸiÅŸtirmek. */
    //"/room/:id": this.getRoom.bind(this), // Bu tanÄ±mlama mantÄ±ksal hataya sebep oluyor.
    "/room/getById/:id": this.getRoom.bind(this), // HatayÄ± bu ÅŸekilde Ã§Ã¶zdÃ¼k.

    "/room/sendMessage": this.sendMessage.bind(this),
    "/room/getMessages": this.getMessages.bind(this),

    "/room/delete": this.delete.bind(this),
    "/room/list": this.list.bind(this),

    "/public/room/lastRooms": this.lastRooms.bind(this),
  };

  websocketRoutes = {
    "room/send": this.wsRoomSendHandler.bind(this),
    "room/join": this.wsRoomJoinHandler.bind(this),
    "room/exit": this.wsRoomExitHandler.bind(this),
  };

  async wsRoomSendHandler(ws, incomingData, wsServer) {
    // TODO Handle here.
  }

  async wsRoomJoinHandler(ws, incomingData, wsServer) {
    // Bu ws connection'a ait userId bilgisi gÃ¶rÃ¼nmeli. EÄŸer bu bilgi yokken
    // bir room'a subscribe olmaya Ã§alÄ±ÅŸÄ±lÄ±yorsa buna mÃ¼sade etmemeliyiz.
    const userId = ws.getUserData().userId;
    if (!userId) {
      // EÄŸer bir websocket baÄŸlantÄ±sÄ± Ã¶nceden auth olmamÄ±ÅŸsa hiÃ§bir room'a da abone olamaz.
      ws.send(this.getErrorJson("Odaya katÄ±labilmek iÃ§in Ã¶nce login olunuz."));
      return;
    }

    // Bu client'Ä± ilgili room'a abone yap.
    ws.subscribe(ROOM_PREFIXES.room_id + incomingData.id);

    // Abone olduÄŸunu client'Ä±n kendisine bildirelim.
    ws.send(
      JSON.stringify(
        this.getSuccessJson({
          roomId: incomingData.id,
        })
      )
    );

    // Odaya yeni birisinin katÄ±ldÄ±ÄŸÄ±nÄ± bÃ¼tÃ¼n abonelere bildirelim.
    setTimeout(() => {
      ws.publish(
        ROOM_PREFIXES.room_id + incomingData.id,
        JSON.stringify({
          command: FRONTEND_WS_COMMANDS.peer_subscribed,
          data: {
            userId,
            roomId: incomingData.id,
          },
        })
      );
    }, 100);
  }

  async wsRoomExitHandler(ws, incomingData, wsServer) {
    const userId = ws.getUserData().userId;
    if (!userId) {
      ws.send(this.getErrorJson("LÃ¼tfen Ã¶nce giriÅŸ yapÄ±nÄ±z."));
      return;
    }

    ws.unsubscribe(ROOM_PREFIXES.room_id + incomingData.id);

    // Odaya yeni birisinin katÄ±ldÄ±ÄŸÄ±nÄ± bÃ¼tÃ¼n abonelere bildirelim.
    setTimeout(() => {
      ws.publish(
        ROOM_PREFIXES.room_id + incomingData.id,
        JSON.stringify({
          command: FRONTEND_WS_COMMANDS.peer_unsubscribed,
          data: {
            userId,
            roomId: incomingData.id,
          },
        })
      );
    }, 100);
  }

  async delete(req, res) {
    // TODO Don't delete rooms, hide them only.

    console.log(">> RoomController::delete() function invoked.");
    res.json({
      status: "success",
    });
  }

  normalizeListInput(req) {
    const ascDesc = ["asc", "desc"];

    const roomName = req.body.room_name;

    const createDateOrder = ascDesc.includes(req.body.create_date_order)
      ? req.body.create_date_order
      : null;

    const nameOrder = ascDesc.includes(req.body.name_order)
      ? req.body.name_order
      : null;

    let pageNo = parseInt(req.body.page_no);
    pageNo = pageNo < 1 ? 1 : pageNo;

    return {
      roomName,
      createDateOrder,
      nameOrder,
      pageNo,
    };
  }

  async list(req, res) {
    /* NasÄ±l bir filtreleme yapacaÄŸÄ±z? Sadece room isimlerini filtreleyeceÄŸiz.
    SÄ±ralama iÅŸlemi iÃ§in de oluÅŸturulma tarihine gÃ¶re, aktif kullanÄ±cÄ± sayÄ±sÄ±na gÃ¶re
    olabilir. Ama aktif kullanÄ±cÄ± sayÄ±sÄ±na gÃ¶re sÄ±ralama yaparken mongoose
    kullanamayacaÄŸÄ±mÄ±zdan dolayÄ± bunu iptal edelim. OluÅŸturma tarihine gÃ¶re ve
    isme gÃ¶re sÄ±ralayalÄ±m.  */

    const input = this.normalizeListInput(req);

    const filter = {
      visibility: "public",
    };

    if (input.roomName) {
      filter.name = { $regex: input.roomName, $options: "i" };
    }

    const sortData = {};
    if (input.nameOrder) {
      sortData.name = input.nameOrder === "desc" ? -1 : 1;
    }
    if (input.createDateOrder) {
      sortData.createdAt = input.createDateOrder === "desc" ? -1 : 1;
    }

    /* SÄ±ralama iÅŸlemleri ascending ve descending olarak isimlendirilir. Bu yÃ¼zden
    bunlarÄ±n kÄ±saltmalarÄ±nÄ± frontendden bekleyebiliriz (asc, desc).
    
    Backend'den sayfa bilgileri de gelmeli. Toplamda kaÃ§ sayfa var, ÅŸuanki sayfa no
    ve ÅŸuanki sayfadaki itemler. */

    const pagination = {
      recordsTotal: await Room.find(filter).countDocuments().exec(),
      recordsPerPage: 3,
      currentPage: 1,
    };

    /* Sayfa sayÄ±sÄ±nÄ± hesaplamak iÃ§in recordsTotal'i rpp'ye bÃ¶lÃ¼p yukarÄ± yuvarlayacaÄŸÄ±z.
    Ã–RneÄŸin 95 adet kayÄ±t var, rpp deÄŸeri 10 ise Math.ceil(95/10) = 10
    Ã–RneÄŸin 91 adet kayÄ±t var, rpp deÄŸeri 10 ise Math.ceil(91/10) = 10
    
    */

    // TODO Sayfalama yap
    const items = await Room.find(filter)
      .sort(sortData)
      .skip((input.pageNo - 1) * pagination.recordsPerPage)
      .limit(pagination.recordsPerPage)
      .exec();

    await sleep(777);

    return this.showSuccess(res, { items, pagination });
  }

  async getRoom(req, res) {
    let room = await Room.findById(req.params.id);
    room = room.toJSON();

    /* Ã–ncelikle bu room'a abone olmuÅŸ olan aktif websocket client'larÄ±nÄ±
    websocket servisten alÄ±yoruz. Buradan bize user_id dizisi dÃ¶necek.
    Sonra bu user id'leri mongodb'den sorgulayÄ±p bÃ¼tÃ¼n userlarÄ±n isimlerine
    ulaÅŸacaÄŸÄ±z. Sonra yine bunlarÄ± dizi olarak `room.peers` deÄŸiÅŸkenine
    aktaracaÄŸÄ±z. BÃ¶ylece user listesini room detay sayfasÄ±na gÃ¶sterebileceÄŸiz. */

    const onlineUserIds =
      await this.services.websocketService.getRoomOnlinePeers(req.params.id);

    const promises = onlineUserIds.map((userId) =>
      User.findById(userId).select("_id, username")
    );
    const peers = await Promise.all(promises);

    this.showSuccess(res, {
      room,
      peers,
    });
  }

  async createRoom(req, res) {
    const validResult = createRoomValidator.validate(req.body);
    if (validResult.error) {
      this.showError(res, validResult.error.message);
      return;
    }

    const room = await Room.create({
      ...validResult.value,
      userId: req.authUserId,
    });
    this.showSuccess(res, { room });
  }

  /* Burada dikkat etmemiz gereken durum ÅŸu: mesajlarÄ±n id'ye gÃ¶re tersten sÄ±ralÄ±
  gelmesini istiyoruz. AyrÄ±ca eÄŸer mesajÄ±n baÅŸlangÄ±Ã§ id'si gÃ¶nderilmemiÅŸse o zaman
  son mesajdan itibaren seÃ§eceÄŸiz, baÅŸlangÄ±Ã§ id'si gÃ¶nderilmiÅŸse o zaman o id'den kÃ¼Ã§Ã¼k
  olan mesajlarÄ± seÃ§eceÄŸiz. */
  async getMessages(req, res) {
    const roomRow = await Room.findById(req.query.room_id);
    if (!roomRow) {
      return this.showError(res, "Oda bulunamadÄ±.");
    }

    let messages = await Message.find({
      roomId: roomRow._id,
    })
      //.populate("userId")
      //      .populate({
      //        path: "userId",
      //        select: "username -_id",
      //      })
      .sort({ _id: -1 })
      .limit(10)
      .exec();

    // TODO Bu satÄ±rÄ± iyice revize et.
    messages = JSON.parse(JSON.stringify(messages));
    messages.reverse();

    // TODO AÅŸaÄŸÄ±daki dÃ¶ngÃ¼yÃ¼ de revize etmenin bir yolunu bul.
    const users = [];
    for (let i = 0; i < messages.length; i++) {
      const message = messages[i];
      const user = await User.findById(message.userId);
      users.push({
        username: user.username,
      });
    }

    this.showSuccess(
      res,
      messages.map((message, index) => {
        return {
          message,
          sender: users[index],
        };
      })
    );
  }

  async sendMessage(req, res) {
    const roomRow = await Room.findById(req.body.room_id);

    if (roomRow) {
      const message = await Message.create({
        userId: req.authUserId,
        roomId: req.body.room_id,
        text: req.body.message,
        type: "text",
      });
      console.log(">> ğŸš€ message:", message);

      const user = await User.findById(req.authUserId);

      // TODO Gelen mesaj bilgisini db'ye kaydet ve sonra websocketten room'daki diÄŸer client'lara gÃ¶nder.
      this.services.websocketService.sendData(
        ROOM_PREFIXES.room_id + req.body.room_id,
        {
          command: FRONTEND_WS_COMMANDS.incoming_message,
          data: {
            message,
            sender: {
              username: user.username,
              firstname: user.firstname,
              lastname: user.lastname,
            },
          },
        }
      );

      res.json({
        status: "success",
        datetime: Date.now(),
      });
    } else {
      return this.showError(res, "Bu oda sistemde mevcut deÄŸil.");
    }
  }

  async lastRooms(req, res) {
    const rooms = await Room.find().sort({ _id: -1 }).limit(6).exec();

    this.showSuccess(res, {
      rooms,
    });
  }
}

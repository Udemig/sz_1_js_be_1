--- Sunucu bilgileri:
server ip adres: 89.116.26.84

curl -fsSL https://rpm.nodesource.com/setup_21.x | sudo -E bash -
dnf install nodejs -y

--- X tabanlı işletim sistemlerinde dosya uzantıları:
.so - Linux (örneğin ubuntu, centos, redhat, android) tabanlı işletim sistemlerinde
library uzantısı
.dylib - Unix (örneğin macos) tabanlı işletim sistemlerinde library uzantısı

--- systemctl komutunun kullanımı:

# systemctl [enable|disable|start|stop|status] [service_name]

$ systemctl

--- Shell promptunun durumu:

Eğer diyez (#) işareti varsa şuanki kullanıcı root'tur veya root (veya wheel) grubuna
dahil olmuş olan bir kullanıcı hesabında oturum açtığımızı gösterir. Eğer dolar ($)
işareti varsa non-root (yani root olmayan) bir hesapta olduğumuzu gösterir.

[root@vmi1587803 ~]# _
[example@vmi1587803 ~]$ _

---

--- Deployment aşamaları:

1- Ön hazırlık:

İhtiyaç duyduğumuz bütün programların (paketlerin) sunucuya kurulması ve gerekli ayarlamaların
yapılması işlemidir. Bizim projemizde nodejs 21, mongodb, yarn gibi programlar gerekliydi ve
bunların kurulumunu gerçekleştirdik.

2- Programların çalışacağı hostingin (linux user account) açılması:

WHM içerisinde yeni bir account oluşturuyoruz. Bu account'a shell yetkisi veriyoruz. Böylece
cpanel'e giriş yaptığımızda panelin içerisinden doğrudan shell'e erişim sağlayabiliyoruz.
Cpanel'den shell'e giriş yapınca şu klasörde login olunur: /home/username

```
db.createUser(
 {
    user: "deployment",
    pwd: "123456",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
 }
)
```

127.0.0.1
127.0.1.1

localhost

3- Projelerin indirilmesi:

Deploy yapacağımız kullanıcının hesabına shell'den giriş yaptıktan sonra bütün projelerin
barınacağı bir klasör oluştururuz. `mkdir projects` gibi. Sonra bu klasörün içerisine girip
`git` komutuyla lazım olan projeleri klonlarız.

-----
- Domainlerin yapısı

Domain uzantısı dediğimiz kısım aslında işin başlangıç noktası.

160.23.34.45 helsinki
160.23.35.45 helsinki_lab
160.23.36.45 helsinki_management

com - company'nin kısaltılmışı
org - organisation'ın kısaltması
edu - education
net - network
mil - military

tr - türkiye
au - australia


example.com
google.com - 12.23.34.45        Bunun ismi domain.
www.google.com - 12.23.34.46    Bunun da ismi domain aslında ama ana domainin sol tarafında
                                ek olduğu için bu eklenmiş haline subdomain diyebiliriz.
maps.google.com - 12.23.34.47   Bu da subdomain örneği.




hasan.huseyin.ahmet.mehmet.falan.filan

160.23.34.46 mit
160.23.34.46 harvard




udemig.dev


--------------------
- WHM apache config dökümanı:
https://support.cpanel.net/hc/en-us/articles/360052925073-How-to-use-Apache-Includes-to-add-Configuration-Directives-to-a-specific-domain-s-VirtualHost



- Bizim kullandığımız komutlar:

read -p "Domain: " -ra domain </dev/tty; \
mkdir -p /etc/apache2/conf.d/userdata/ssl/2_4/$(/scripts/whoowns $domain)/$domain/; \
mkdir -p /etc/apache2/conf.d/userdata/std/2_4/$(/scripts/whoowns $domain)/$domain/; \
nano /etc/apache2/conf.d/userdata/ssl/2_4/$(/scripts/whoowns $domain)/$domain/include.conf; \
cp /etc/apache2/conf.d/userdata/ssl/2_4/$(/scripts/whoowns $domain)/$domain/include.conf \
/etc/apache2/conf.d/userdata/std/2_4/$(/scripts/whoowns $domain)/$domain/include.conf ;


/usr/local/cpanel/scripts/rebuildhttpdconf; /usr/local/cpanel/scripts/restartsrv_httpd


http reverse proxy için include.conf içeriği
ProxyPass /.well-known !
ProxyPass / http://127.0.0.1:5000/
ProxyPassReverse / http://127.0.0.1:5000/


ws reverse proxy için include.conf içeriği
ProxyPass /.well-known !
ProxyPass / ws://127.0.0.1:5001/
ProxyPassReverse / ws://127.0.0.1:5001/
